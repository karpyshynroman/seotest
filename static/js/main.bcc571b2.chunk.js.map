{"version":3,"sources":["logo.svg","components/PostList.js","components/PostDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PostList","useState","listOfPosts","state","setState","useEffect","a","fetch","response","json","prepearedData","slice","console","error","log","map","item","title","PostDetail","post","body","history","useHistory","location","pathname","to","App","className","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,qJCoC5BC,EAjCE,WAAO,IAAD,EAEKC,mBAAS,CACjCC,YAAa,KAHM,mBAEdC,EAFc,KAEPC,EAFO,KAsBrB,OAhBAC,qBAAU,WACR,sBAAC,gCAAAC,EAAA,+EAE0BC,MAAM,8CAFhC,cAESC,EAFT,gBAIsBA,EAASC,OAJ/B,OAISA,EAJT,OAKSC,EAAgBD,EAAKE,MAAM,EAAG,IACpCP,EAAS,CACPF,YAAaQ,IAPlB,kDAUGE,QAAQC,MAAR,MAVH,yDAAD,KAaC,IAGD,oCACE,yCACCD,QAAQE,IAAI,SAASX,GACtB,4BACGA,EAAMD,aAAeC,EAAMD,YAAYa,KAAI,SAAAC,GAAI,OAAI,4BAAKA,EAAKC,a,cCOvDC,EAlCI,WAAO,IAAD,EACGjB,mBAAS,CACjCkB,KAAM,CAACC,KAAM,GAAIH,MAAO,MAFH,mBAChBd,EADgB,KACTC,EADS,KAKjBiB,EAAUC,cAkBhB,OAhBAjB,qBAAU,WACR,sBAAC,8BAAAC,EAAA,+EAE0BC,MAAM,6CAAD,OACmBc,EAAQE,SAASC,WAHnE,cAEShB,EAFT,gBAIsBA,EAASC,OAJ/B,OAISA,EAJT,OAKGL,EAAS,CACPe,KAAMV,IANX,kDASGG,QAAQC,MAAR,MATH,yDAAD,KAYC,IAID,wCAAIV,EAAMgB,KAAKF,OACf,6BACE,4BAAKd,EAAMgB,KAAKF,OAChB,iCAAUd,EAAMgB,KAAKC,MACrB,2BAAG,kBAAC,IAAD,CAAMK,GAAI,KAAV,qBCXMC,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjC,kBAAC,IAAD,CAAO6B,KAAK,OAAOC,UAAWZ,QCDpBa,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLD,QAAQC,MAAMA,EAAMkC,c","file":"static/js/main.bcc571b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nconst PostList = () => {\n\n  const [state, setState] = useState({\n    listOfPosts: []\n  });\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/posts`);\n        const json = await response.json();\n        const prepearedData = json.slice(0, 10);\n        setState({\n          listOfPosts: prepearedData\n        })\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      <h1>All posts</h1>\n      {console.log('sdsdsd',state)}\n      <ul>\n        {state.listOfPosts && state.listOfPosts.map(item => <li>{item.title}</li>)}\n      </ul>\n    </>\n  );\n};\n\nexport default PostList;\n","import React, {useEffect, useState} from 'react';\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\n\nconst PostDetail = () => {\n  const [state, setState] = useState({\n    post: {body: '', title: ''}\n  });\n\n  const history = useHistory();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/posts${history.location.pathname}`);\n        const json = await response.json();\n        setState({\n          post: json\n        })\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n\n\n  return (\n    <> {state.post.title &&\n    <div>\n      <h2>{state.post.title}</h2>\n      <article>{state.post.body}</article>\n      <p><Link to={'/'}>Back to posts</Link></p>\n    </div>}\n    </>\n  );\n};\n\nexport default PostDetail;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PostList from \"./components/PostList\";\nimport {BrowserRouter, Route, Router, Switch} from \"react-router-dom\";\nimport PostDetail from \"./components/PostDetail\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={PostList}/>\n          <Route path='/:id' component={PostDetail}/>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}